/*
Custom Workflow Actions

Create custom workflow actions

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"encoding/json"
	"fmt"
)

// ExtensionActionDefinitionInputFieldDependenciesInner - struct for ExtensionActionDefinitionInputFieldDependenciesInner
type ExtensionActionDefinitionInputFieldDependenciesInner struct {
	ConditionalSingleFieldDependency *ConditionalSingleFieldDependency
	SingleFieldDependency            *SingleFieldDependency
}

// ConditionalSingleFieldDependencyAsExtensionActionDefinitionInputFieldDependenciesInner is a convenience function that returns ConditionalSingleFieldDependency wrapped in ExtensionActionDefinitionInputFieldDependenciesInner
func ConditionalSingleFieldDependencyAsExtensionActionDefinitionInputFieldDependenciesInner(v *ConditionalSingleFieldDependency) ExtensionActionDefinitionInputFieldDependenciesInner {
	return ExtensionActionDefinitionInputFieldDependenciesInner{
		ConditionalSingleFieldDependency: v,
	}
}

// SingleFieldDependencyAsExtensionActionDefinitionInputFieldDependenciesInner is a convenience function that returns SingleFieldDependency wrapped in ExtensionActionDefinitionInputFieldDependenciesInner
func SingleFieldDependencyAsExtensionActionDefinitionInputFieldDependenciesInner(v *SingleFieldDependency) ExtensionActionDefinitionInputFieldDependenciesInner {
	return ExtensionActionDefinitionInputFieldDependenciesInner{
		SingleFieldDependency: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ExtensionActionDefinitionInputFieldDependenciesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConditionalSingleFieldDependency
	err = newStrictDecoder(data).Decode(&dst.ConditionalSingleFieldDependency)
	if err == nil {
		jsonConditionalSingleFieldDependency, _ := json.Marshal(dst.ConditionalSingleFieldDependency)
		if string(jsonConditionalSingleFieldDependency) == "{}" { // empty struct
			dst.ConditionalSingleFieldDependency = nil
		} else {
			match++
		}
	} else {
		dst.ConditionalSingleFieldDependency = nil
	}

	// try to unmarshal data into SingleFieldDependency
	err = newStrictDecoder(data).Decode(&dst.SingleFieldDependency)
	if err == nil {
		jsonSingleFieldDependency, _ := json.Marshal(dst.SingleFieldDependency)
		if string(jsonSingleFieldDependency) == "{}" { // empty struct
			dst.SingleFieldDependency = nil
		} else {
			match++
		}
	} else {
		dst.SingleFieldDependency = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConditionalSingleFieldDependency = nil
		dst.SingleFieldDependency = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ExtensionActionDefinitionInputFieldDependenciesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ExtensionActionDefinitionInputFieldDependenciesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ExtensionActionDefinitionInputFieldDependenciesInner) MarshalJSON() ([]byte, error) {
	if src.ConditionalSingleFieldDependency != nil {
		return json.Marshal(&src.ConditionalSingleFieldDependency)
	}

	if src.SingleFieldDependency != nil {
		return json.Marshal(&src.SingleFieldDependency)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ExtensionActionDefinitionInputFieldDependenciesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ConditionalSingleFieldDependency != nil {
		return obj.ConditionalSingleFieldDependency
	}

	if obj.SingleFieldDependency != nil {
		return obj.SingleFieldDependency
	}

	// all schemas are nil
	return nil
}

type NullableExtensionActionDefinitionInputFieldDependenciesInner struct {
	value *ExtensionActionDefinitionInputFieldDependenciesInner
	isSet bool
}

func (v NullableExtensionActionDefinitionInputFieldDependenciesInner) Get() *ExtensionActionDefinitionInputFieldDependenciesInner {
	return v.value
}

func (v *NullableExtensionActionDefinitionInputFieldDependenciesInner) Set(val *ExtensionActionDefinitionInputFieldDependenciesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionActionDefinitionInputFieldDependenciesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionActionDefinitionInputFieldDependenciesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionActionDefinitionInputFieldDependenciesInner(val *ExtensionActionDefinitionInputFieldDependenciesInner) *NullableExtensionActionDefinitionInputFieldDependenciesInner {
	return &NullableExtensionActionDefinitionInputFieldDependenciesInner{value: val, isSet: true}
}

func (v NullableExtensionActionDefinitionInputFieldDependenciesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionActionDefinitionInputFieldDependenciesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
