/*
 * Blog Post endpoints
 *
 * \"Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags\"
 *
 * API version: v3
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package blog_posts

import (
	"time"
)

// Model definition for a Blog Post.
type BlogPost struct {
	// The unique ID of the Blog Post.
	Id string `json:"id"`
	// The path of the this blog post. This field is appended to the domain to construct the url of this post.
	Slug string `json:"slug"`
	// The ID of the parent Blog this Blog Post is associated with.
	ContentGroupId string `json:"contentGroupId"`
	// The GUID of the marketing campaign this Blog Post is a part of.
	Campaign string `json:"campaign"`
	// ID of the type of object this is. Should always .
	CategoryId int32 `json:"categoryId"`
	// An ENUM descibing the current state of this Blog Post.
	State        string `json:"state"`
	TemplatePath string `json:"templatePath"`
	// The internal name of the blog post.
	Name            string `json:"name"`
	MabExperimentId string `json:"mabExperimentId"`
	// If True, the post will not show up in your dashboard, although the post could still be live.
	Archived bool `json:"archived"`
	// The name of the user that updated this blog post.
	AuthorName string `json:"authorName"`
	AbTestId   string `json:"abTestId"`
	// The ID of the user that created this blog post.
	CreatedById string `json:"createdById"`
	// The ID of the user that updated this blog post.
	UpdatedById string `json:"updatedById"`
	// The domain this Blog Post will resolve to. If null, the Blog Post will default to the domain of the ParentBlog.
	Domain      string `json:"domain"`
	Subcategory string `json:"subcategory"`
	AbStatus    string `json:"abStatus"`
	FolderId    string `json:"folderId"`
	// A data structure containing the data for all the modules inside the containers for this post. This will only be populated if the page has widget containers.
	WidgetContainers map[string]interface{} `json:"widgetContainers"`
	// A data structure containing the data for all the modules for this page.
	Widgets map[string]interface{} `json:"widgets"`
	// The explicitly defined language of the Blog Post. If null, the Blog Post will default to the language of the ParentBlog.
	Language string `json:"language"`
	// ID of the primary blog post this object was translated from.
	TranslatedFromId        string `json:"translatedFromId"`
	DynamicPageHubDbTableId string `json:"dynamicPageHubDbTableId"`
	// The ID of the Blog Author associated with this Blog Post.
	BlogAuthorId string `json:"blogAuthorId"`
	// List of IDs for the tags associated with this Blog Post.
	TagIds []int64 `json:"tagIds"`
	// The HTML of the main post body.
	PostBody string `json:"postBody"`
	// The summary of the blog post that will appear on the main listing page.
	PostSummary string `json:"postSummary"`
	// The contents of the RSS body for this Blog Post.
	RssBody string `json:"rssBody"`
	// The contents of the RSS summary for this Blog Post.
	RssSummary string `json:"rssSummary"`
	// Boolean to allow overriding the AMP settings for the blog.
	EnableGoogleAmpOutputOverride bool `json:"enableGoogleAmpOutputOverride"`
	// The html title of this Blog Post.
	HtmlTitle             string `json:"htmlTitle"`
	PageRedirected        bool   `json:"pageRedirected"`
	PageExpiryEnabled     bool   `json:"pageExpiryEnabled"`
	PageExpiryDate        int64  `json:"pageExpiryDate"`
	PageExpiryRedirectId  int64  `json:"pageExpiryRedirectId"`
	PageExpiryRedirectUrl string `json:"pageExpiryRedirectUrl"`
	// Boolean to determine if this post should use a featuredImage.
	UseFeaturedImage bool `json:"useFeaturedImage"`
	// Set this to create a password protected page. Entering the password will be required to view the page.
	Password string `json:"password"`
	// List of stylesheets to attach to this blog post. These stylesheets are attached to just this page. Order of precedence is bottom to top, just like in the HTML.
	AttachedStylesheets []map[string]interface{} `json:"attachedStylesheets"`
	// Boolean to determine whether or not the Primary CSS Files should be applied.
	IncludeDefaultCustomCss bool `json:"includeDefaultCustomCss"`
	// Boolean to determine whether or not the styles from the template should be applied.
	EnableDomainStylesheets bool `json:"enableDomainStylesheets"`
	// Boolean to determine whether or not the styles from the template should be applied.
	EnableLayoutStylesheets bool `json:"enableLayoutStylesheets"`
	// A description that goes in <meta> tag on the page.
	MetaDescription string `json:"metaDescription"`
	// Set this to true if you want to be published immediately when the schedule publish endpoint is called, and to ignore the publish_date setting.
	PublishImmediately bool `json:"publishImmediately"`
	// Custom HTML for embed codes, javascript, etc. that goes in the <head> tag of the page.
	HeadHtml string `json:"headHtml"`
	// Custom HTML for embed codes, javascript that should be placed before the </body> tag of the page.
	FooterHtml string `json:"footerHtml"`
	// An ENUM descibing the type of this object. Should always be BLOG_POST.
	ContentTypeCategory string `json:"contentTypeCategory"`
	// A generated ENUM descibing the current state of this Blog Post. Should always match state.
	CurrentState string `json:"currentState"`
	// Optional override to set the URL to be used in the rel=canonical link tag on the page.
	LinkRelCanonicalUrl string `json:"linkRelCanonicalUrl"`
	// The featuredImage of this Blog Post.
	FeaturedImage string `json:"featuredImage"`
	// Alt Text of the featuredImage.
	FeaturedImageAltText string `json:"featuredImageAltText"`
	// Boolean to determine whether or not to respect publicAccessRules.
	PublicAccessRulesEnabled bool `json:"publicAccessRulesEnabled"`
	// Rules for require member registration to access private content.
	PublicAccessRules   []PublicAccessRule       `json:"publicAccessRules"`
	LayoutSections      map[string]LayoutSection `json:"layoutSections"`
	ThemeSettingsValues map[string]interface{}   `json:"themeSettingsValues"`
	// A generated field representing the URL of this blog post.
	Url string `json:"url"`
	// The date (ISO8601 format) the blog post is to be published at.
	PublishDate time.Time `json:"publishDate"`
	// The timestamp (ISO8601 format) when this Blog Post was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The timestamp (ISO8601 format) when this blog post was created.
	CreatedAt time.Time `json:"createdAt"`
	// Boolean describing if this Blog Post is published.
	Published bool `json:"published"`
	// The timestamp (ISO8601 format) when this Blog Post was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}
