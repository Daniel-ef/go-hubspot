/*
Blog Post endpoints

\"Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags\"

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blog_posts

import (
	"encoding/json"
	"time"
)

// VersionBlogPost Model definition for a Version Blog Post. Contains metadata describing the version of the Blog Post. It can be used to view edit history of a post.
type VersionBlogPost struct {
	Object BlogPost    `json:"object"`
	User   VersionUser `json:"user"`
	// The id of the version.
	Id string `json:"id"`
	// The timestamp (ISO8601 format) when this version was updated.
	Updated time.Time `json:"updated"`
}

// NewVersionBlogPost instantiates a new VersionBlogPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionBlogPost(object BlogPost, user VersionUser, id string, updated time.Time) *VersionBlogPost {
	this := VersionBlogPost{}
	this.Object = object
	this.User = user
	this.Id = id
	this.Updated = updated
	return &this
}

// NewVersionBlogPostWithDefaults instantiates a new VersionBlogPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionBlogPostWithDefaults() *VersionBlogPost {
	this := VersionBlogPost{}
	return &this
}

// GetObject returns the Object field value
func (o *VersionBlogPost) GetObject() BlogPost {
	if o == nil {
		var ret BlogPost
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *VersionBlogPost) GetObjectOk() (*BlogPost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *VersionBlogPost) SetObject(v BlogPost) {
	o.Object = v
}

// GetUser returns the User field value
func (o *VersionBlogPost) GetUser() VersionUser {
	if o == nil {
		var ret VersionUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *VersionBlogPost) GetUserOk() (*VersionUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *VersionBlogPost) SetUser(v VersionUser) {
	o.User = v
}

// GetId returns the Id field value
func (o *VersionBlogPost) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VersionBlogPost) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VersionBlogPost) SetId(v string) {
	o.Id = v
}

// GetUpdated returns the Updated field value
func (o *VersionBlogPost) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *VersionBlogPost) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *VersionBlogPost) SetUpdated(v time.Time) {
	o.Updated = v
}

func (o VersionBlogPost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableVersionBlogPost struct {
	value *VersionBlogPost
	isSet bool
}

func (v NullableVersionBlogPost) Get() *VersionBlogPost {
	return v.value
}

func (v *NullableVersionBlogPost) Set(val *VersionBlogPost) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionBlogPost) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionBlogPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionBlogPost(val *VersionBlogPost) *NullableVersionBlogPost {
	return &NullableVersionBlogPost{value: val, isSet: true}
}

func (v NullableVersionBlogPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionBlogPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
