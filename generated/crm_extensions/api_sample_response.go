/*
CRM cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_extensions

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// SampleResponseApiService SampleResponseApi service
type SampleResponseApiService service

type ApiGetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseRequest struct {
	ctx        _context.Context
	ApiService *SampleResponseApiService
}

func (r ApiGetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseRequest) Execute() (IntegratorCardPayloadResponse, *_nethttp.Response, error) {
	return r.ApiService.GetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseExecute(r)
}

/*
GetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponse Get sample card detail response

Returns an example card detail response. This is the payload with displayed details for a card that will be shown to a user. An app should send this in response to the data fetch request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseRequest
*/
func (a *SampleResponseApiService) GetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponse(ctx _context.Context) ApiGetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseRequest {
	return ApiGetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return IntegratorCardPayloadResponse
func (a *SampleResponseApiService) GetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseExecute(r ApiGetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponseRequest) (IntegratorCardPayloadResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IntegratorCardPayloadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SampleResponseApiService.GetCrmV3ExtensionsCardsSampleResponseGetCardsSampleResponse")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/cards/sample-response"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
