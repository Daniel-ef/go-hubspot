/*
Marketing Events Extension

These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events_beta

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"

	"github.com/clarkmcc/go-hubspot/authorization"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// BasicApiService BasicApi service
type BasicApiService service

type ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest struct {
	ctx               _context.Context
	ApiService        *BasicApiService
	externalEventId   string
	externalAccountId *string
}

// The account id associated with the marketing event
func (r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest) ExternalAccountId(externalAccountId string) ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteMarketingV3MarketingEventsEventsExternalEventIdExecute(r)
}

/*
DeleteMarketingV3MarketingEventsEventsExternalEventId Delete a marketing event

Deletes an existing Marketing Event with the specified id, if one exists.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to delete
 @return ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest
*/
func (a *BasicApiService) DeleteMarketingV3MarketingEventsEventsExternalEventId(ctx _context.Context, externalEventId string) ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest {
	return ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
func (a *BasicApiService) DeleteMarketingV3MarketingEventsEventsExternalEventIdExecute(r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.DeleteMarketingV3MarketingEventsEventsExternalEventId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", _neturl.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.externalAccountId == nil {
		return nil, reportError("externalAccountId is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(authorization.ContextAPIKeys).(map[string]authorization.APIKey); ok {
			if apiKey, ok := auth["hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest struct {
	ctx               _context.Context
	ApiService        *BasicApiService
	externalEventId   string
	externalAccountId *string
}

// The account id associated with the marketing event
func (r ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest) ExternalAccountId(externalAccountId string) ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest) Execute() (MarketingEventPublicReadResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsEventsExternalEventIdExecute(r)
}

/*
GetMarketingV3MarketingEventsEventsExternalEventId Get a marketing event

Returns the details of the Marketing Event with the specified id, if one exists.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to return
 @return ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest
*/
func (a *BasicApiService) GetMarketingV3MarketingEventsEventsExternalEventId(ctx _context.Context, externalEventId string) ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest {
	return ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicReadResponse
func (a *BasicApiService) GetMarketingV3MarketingEventsEventsExternalEventIdExecute(r ApiGetMarketingV3MarketingEventsEventsExternalEventIdRequest) (MarketingEventPublicReadResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MarketingEventPublicReadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.GetMarketingV3MarketingEventsEventsExternalEventId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", _neturl.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(authorization.ContextAPIKeys).(map[string]authorization.APIKey); ok {
			if apiKey, ok := auth["hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest struct {
	ctx                               _context.Context
	ApiService                        *BasicApiService
	externalEventId                   string
	externalAccountId                 *string
	marketingEventUpdateRequestParams *MarketingEventUpdateRequestParams
}

// The account id associated with the marketing event
func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest) ExternalAccountId(externalAccountId string) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest {
	r.externalAccountId = &externalAccountId
	return r
}

// The details of the marketing event to update
func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest) MarketingEventUpdateRequestParams(marketingEventUpdateRequestParams MarketingEventUpdateRequestParams) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest {
	r.marketingEventUpdateRequestParams = &marketingEventUpdateRequestParams
	return r
}

func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest) Execute() (MarketingEventPublicDefaultResponse, *_nethttp.Response, error) {
	return r.ApiService.PatchMarketingV3MarketingEventsEventsExternalEventIdExecute(r)
}

/*
PatchMarketingV3MarketingEventsEventsExternalEventId Update a marketing event

Updates an existing Marketing Event with the specified id, if one exists.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to update
 @return ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest
*/
func (a *BasicApiService) PatchMarketingV3MarketingEventsEventsExternalEventId(ctx _context.Context, externalEventId string) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest {
	return ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicDefaultResponse
func (a *BasicApiService) PatchMarketingV3MarketingEventsEventsExternalEventIdExecute(r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdRequest) (MarketingEventPublicDefaultResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MarketingEventPublicDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PatchMarketingV3MarketingEventsEventsExternalEventId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", _neturl.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}
	if r.marketingEventUpdateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventUpdateRequestParams is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventUpdateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(authorization.ContextAPIKeys).(map[string]authorization.APIKey); ok {
			if apiKey, ok := auth["hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsEventsRequest struct {
	ctx                               _context.Context
	ApiService                        *BasicApiService
	marketingEventCreateRequestParams *MarketingEventCreateRequestParams
}

// The details of the marketing event to create
func (r ApiPostMarketingV3MarketingEventsEventsRequest) MarketingEventCreateRequestParams(marketingEventCreateRequestParams MarketingEventCreateRequestParams) ApiPostMarketingV3MarketingEventsEventsRequest {
	r.marketingEventCreateRequestParams = &marketingEventCreateRequestParams
	return r
}

func (r ApiPostMarketingV3MarketingEventsEventsRequest) Execute() (MarketingEventDefaultResponse, *_nethttp.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsEventsExecute(r)
}

/*
PostMarketingV3MarketingEventsEvents Create a marketing event

Creates a new marketing event in HubSpot

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3MarketingEventsEventsRequest
*/
func (a *BasicApiService) PostMarketingV3MarketingEventsEvents(ctx _context.Context) ApiPostMarketingV3MarketingEventsEventsRequest {
	return ApiPostMarketingV3MarketingEventsEventsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return MarketingEventDefaultResponse
func (a *BasicApiService) PostMarketingV3MarketingEventsEventsExecute(r ApiPostMarketingV3MarketingEventsEventsRequest) (MarketingEventDefaultResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MarketingEventDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PostMarketingV3MarketingEventsEvents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.marketingEventCreateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventCreateRequestParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventCreateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(authorization.ContextAPIKeys).(map[string]authorization.APIKey); ok {
			if apiKey, ok := auth["hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest struct {
	ctx               _context.Context
	ApiService        *BasicApiService
	externalEventId   string
	externalAccountId *string
}

// The account id associated with the marketing event
func (r ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest) ExternalAccountId(externalAccountId string) ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest) Execute() (MarketingEventDefaultResponse, *_nethttp.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsEventsExternalEventIdCancelExecute(r)
}

/*
PostMarketingV3MarketingEventsEventsExternalEventIdCancel Mark a marketing event as cancelled

Mark a marketing event as cancelled.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to mark as cancelled
 @return ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest
*/
func (a *BasicApiService) PostMarketingV3MarketingEventsEventsExternalEventIdCancel(ctx _context.Context, externalEventId string) ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest {
	return ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventDefaultResponse
func (a *BasicApiService) PostMarketingV3MarketingEventsEventsExternalEventIdCancelExecute(r ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelRequest) (MarketingEventDefaultResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MarketingEventDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PostMarketingV3MarketingEventsEventsExternalEventIdCancel")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", _neturl.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(authorization.ContextAPIKeys).(map[string]authorization.APIKey); ok {
			if apiKey, ok := auth["hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest struct {
	ctx                               _context.Context
	ApiService                        *BasicApiService
	externalEventId                   string
	marketingEventCreateRequestParams *MarketingEventCreateRequestParams
}

// The details of the marketing event to upsert
func (r ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest) MarketingEventCreateRequestParams(marketingEventCreateRequestParams MarketingEventCreateRequestParams) ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest {
	r.marketingEventCreateRequestParams = &marketingEventCreateRequestParams
	return r
}

func (r ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest) Execute() (MarketingEventPublicDefaultResponse, *_nethttp.Response, error) {
	return r.ApiService.PutMarketingV3MarketingEventsEventsExternalEventIdExecute(r)
}

/*
PutMarketingV3MarketingEventsEventsExternalEventId Create or update a marketing event

Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to upsert
 @return ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest
*/
func (a *BasicApiService) PutMarketingV3MarketingEventsEventsExternalEventId(ctx _context.Context, externalEventId string) ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest {
	return ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicDefaultResponse
func (a *BasicApiService) PutMarketingV3MarketingEventsEventsExternalEventIdExecute(r ApiPutMarketingV3MarketingEventsEventsExternalEventIdRequest) (MarketingEventPublicDefaultResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MarketingEventPublicDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PutMarketingV3MarketingEventsEventsExternalEventId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", _neturl.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.marketingEventCreateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventCreateRequestParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventCreateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(authorization.ContextAPIKeys).(map[string]authorization.APIKey); ok {
			if apiKey, ok := auth["hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
