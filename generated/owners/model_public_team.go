/*
CRM Owners

HubSpot uses **owners** to assign CRM objects to specific people in your organization. The endpoints described here are used to get a list of the owners that are available for an account. To assign an owner to an object, set the hubspot_owner_id property using the appropriate CRM object update or create a request.  If teams are available for your HubSpot tier, these endpoints will also indicate which team an owner belongs to. Team membership can be one of PRIMARY (default), SECONDARY, or CHILD.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package owners

import (
	"encoding/json"
)

// PublicTeam struct for PublicTeam
type PublicTeam struct {
	Id         string  `json:"id"`
	Name       string  `json:"name"`
	Membership *string `json:"membership,omitempty"`
}

// NewPublicTeam instantiates a new PublicTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicTeam(id string, name string) *PublicTeam {
	this := PublicTeam{}
	this.Id = id
	this.Name = name
	return &this
}

// NewPublicTeamWithDefaults instantiates a new PublicTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicTeamWithDefaults() *PublicTeam {
	this := PublicTeam{}
	return &this
}

// GetId returns the Id field value
func (o *PublicTeam) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicTeam) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicTeam) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PublicTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicTeam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicTeam) SetName(v string) {
	o.Name = v
}

// GetMembership returns the Membership field value if set, zero value otherwise.
func (o *PublicTeam) GetMembership() string {
	if o == nil || o.Membership == nil {
		var ret string
		return ret
	}
	return *o.Membership
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicTeam) GetMembershipOk() (*string, bool) {
	if o == nil || o.Membership == nil {
		return nil, false
	}
	return o.Membership, true
}

// HasMembership returns a boolean if a field has been set.
func (o *PublicTeam) HasMembership() bool {
	if o != nil && o.Membership != nil {
		return true
	}

	return false
}

// SetMembership gets a reference to the given string and assigns it to the Membership field.
func (o *PublicTeam) SetMembership(v string) {
	o.Membership = &v
}

func (o PublicTeam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Membership != nil {
		toSerialize["membership"] = o.Membership
	}
	return json.Marshal(toSerialize)
}

type NullablePublicTeam struct {
	value *PublicTeam
	isSet bool
}

func (v NullablePublicTeam) Get() *PublicTeam {
	return v.value
}

func (v *NullablePublicTeam) Set(val *PublicTeam) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicTeam) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicTeam(val *PublicTeam) *NullablePublicTeam {
	return &NullablePublicTeam{value: val, isSet: true}
}

func (v NullablePublicTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
