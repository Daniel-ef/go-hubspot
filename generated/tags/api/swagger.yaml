openapi: 3.0.1
info:
  title: Blog Post endpoints
  description: "\"Use these endpoints for interacting with Blog Posts, Blog Authors,\
    \ and Blog Tags\""
  version: v3
servers:
- url: https://api.hubapi.com/
tags:
- name: Tag
paths:
  /cms/v3/blogs/tags:
    get:
      tags:
      - Tag
      summary: Get all Blog Tags
      description: |
        Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.
      operationId: get-/cms/v3/blogs/tags_getPage
      parameters:
      - name: createdAt
        in: query
        description: Only return Blog Tags created at exactly the specified time.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: createdAfter
        in: query
        description: Only return Blog Tags created after the specified time.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: createdBefore
        in: query
        description: Only return Blog Tags created before the specified time.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: updatedAt
        in: query
        description: Only return Blog Tags last updated at exactly the specified time.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: updatedAfter
        in: query
        description: Only return Blog Tags last updated after the specified time.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: updatedBefore
        in: query
        description: Only return Blog Tags last updated before the specified time.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: sort
        in: query
        description: "Specifies which fields to use for sorting results. Valid fields\
          \ are `name`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`. `createdAt`\
          \ will be used by default."
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: after
        in: query
        description: The cursor token value to get the next set of results. You can
          get this from the `paging.next.after` JSON property of a paged response
          containing more results.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of results to return. Default is 100.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: archived
        in: query
        description: Specifies whether to return archived Blog Tags. Defaults to `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponseWithTotalTagForwardPaging'
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
    post:
      tags:
      - Tag
      summary: Create a new Blog Tag
      description: Create a new Blog Tag.
      operationId: post-/cms/v3/blogs/tags_create
      requestBody:
        description: The JSON representation of a new Blog Tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
  /cms/v3/blogs/tags/batch/archive:
    post:
      tags:
      - Tag
      summary: Archive a batch of Blog Tags
      description: "Delete the Blog Tag objects identified in the request body.\n\
        Note: This is not the same as the in-app `archive` function."
      operationId: post-/cms/v3/blogs/tags/batch/archive_archiveBatch
      requestBody:
        description: The JSON array of Blog Tag ids.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchInputString'
        required: true
      responses:
        "204":
          description: No content
          content: {}
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
  /cms/v3/blogs/tags/batch/create:
    post:
      tags:
      - Tag
      summary: Create a batch of Blog Tags
      description: Create the Blog Tag objects detailed in the request body.
      operationId: post-/cms/v3/blogs/tags/batch/create_createBatch
      requestBody:
        description: The JSON array of new Blog Tags to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchInputTag'
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponseTag'
        "207":
          description: multiple statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponseTagWithErrors'
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
  /cms/v3/blogs/tags/batch/read:
    post:
      tags:
      - Tag
      summary: Retrieve a batch of Blog Tags
      description: Retrieve the Blog Tag objects identified in the request body.
      operationId: post-/cms/v3/blogs/tags/batch/read_readBatch
      parameters:
      - name: archived
        in: query
        description: Specifies whether to return archived Blog Tags. Defaults to `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: The JSON array of Blog Tag ids.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchInputString'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponseTag'
        "207":
          description: multiple statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponseTagWithErrors'
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
  /cms/v3/blogs/tags/batch/update:
    post:
      tags:
      - Tag
      summary: Update a batch of Blog Tags
      description: Update the Blog Tag objects identified in the request body.
      operationId: post-/cms/v3/blogs/tags/batch/update_updateBatch
      parameters:
      - name: archived
        in: query
        description: Specifies whether to update archived Blog Tags. Defaults to `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: A JSON array of the JSON representations of the updated Blog
          Tags.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchInputJsonNode'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponseTag'
        "207":
          description: multiple statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponseTagWithErrors'
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
  /cms/v3/blogs/tags/{objectId}:
    get:
      tags:
      - Tag
      summary: Retrieve a Blog Tag
      description: Retrieve the Blog Tag object identified by the id in the path.
      operationId: "get-/cms/v3/blogs/tags/{objectId}_getById"
      parameters:
      - name: objectId
        in: path
        description: The Blog Tag id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: archived
        in: query
        description: Specifies whether to return archived Blog Tags. Defaults to `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
    delete:
      tags:
      - Tag
      summary: Delete a Blog Tag
      description: Delete the Blog Tag object identified by the id in the path.
      operationId: "delete-/cms/v3/blogs/tags/{objectId}_archive"
      parameters:
      - name: objectId
        in: path
        description: The Blog Tag id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: archived
        in: query
        description: Whether to return only results that have been archived.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "204":
          description: No content
          content: {}
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
    patch:
      tags:
      - Tag
      summary: Update a Blog Tag
      description: |
        Sparse updates a single Blog Tag object identified by the id in the path.
        All the column values need not be specified. Only the that need to be modified can be specified.
      operationId: "patch-/cms/v3/blogs/tags/{objectId}_update"
      parameters:
      - name: objectId
        in: path
        description: The Blog Tag id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: archived
        in: query
        description: Specifies whether to update archived Blog Tags. Defaults to `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: The JSON representation of the updated Blog Tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: An error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - hapikey: []
      - oauth2_legacy:
        - content
components:
  schemas:
    BatchInputJsonNode:
      required:
      - inputs
      type: object
      properties:
        inputs:
          type: array
          items:
            type: object
            properties: {}
    BatchInputString:
      required:
      - inputs
      type: object
      properties:
        inputs:
          type: array
          items:
            type: string
    BatchInputTag:
      required:
      - inputs
      type: object
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    BatchResponseTag:
      type: object
    BatchResponseTagWithErrors:
      required:
      - completedAt
      - results
      - startedAt
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - PENDING
          - PROCESSING
          - CANCELED
          - COMPLETE
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        numErrors:
          type: integer
          format: int32
        errors:
          type: array
          items:
            $ref: '#/components/schemas/StandardError'
        requestedAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        links:
          type: object
          additionalProperties:
            type: string
    CollectionResponseWithTotalTagForwardPaging:
      required:
      - results
      - total
      type: object
      properties:
        total:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        paging:
          $ref: '#/components/schemas/ForwardPaging'
      example:
        total: 0
        paging:
          next:
            link: link
            after: after
        results:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          name: name
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          name: name
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
    Error:
      required:
      - category
      - correlationId
      - message
      type: object
      properties:
        message:
          type: string
          description: A human readable message describing the error along with remediation
            steps where appropriate
          example: An error occurred
        correlationId:
          type: string
          description: A unique identifier for the request. Include this value with
            any error reports or support tickets
          format: uuid
          example: aeb5f871-7f07-4993-9211-075dc63e7cbf
        category:
          type: string
          description: The error category
        subCategory:
          type: string
          description: A specific category that contains more specific detail about
            the error
        errors:
          type: array
          description: further information about the error
          items:
            $ref: '#/components/schemas/ErrorDetail'
        context:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Context about the error condition
          example:
            invalidPropertyName:
            - propertyValue
            missingScopes:
            - scope1
            - scope2
        links:
          type: object
          additionalProperties:
            type: string
          description: A map of link names to associated URIs containing documentation
            about the error or recommended remediation steps
      example:
        message: Invalid input (details will vary based on the error)
        correlationId: aeb5f871-7f07-4993-9211-075dc63e7cbf
        category: VALIDATION_ERROR
        links:
          knowledge-base: https://www.hubspot.com/products/service/knowledge-base
    ErrorCategory:
      type: object
    ErrorDetail:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: A human readable message describing the error along with remediation
            steps where appropriate
        in:
          type: string
          description: The name of the field or parameter in which the error was found.
        code:
          type: string
          description: The status code associated with the error detail
        subCategory:
          type: string
          description: A specific category that contains more specific detail about
            the error
        context:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Context about the error condition
          example:
            missingScopes:
            - scope1
            - scope2
    ForwardPaging:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/NextPage'
      example:
        next:
          link: link
          after: after
    NextPage:
      required:
      - after
      type: object
      properties:
        after:
          type: string
        link:
          type: string
      example:
        link: link
        after: after
    StandardError:
      required:
      - category
      - context
      - errors
      - links
      - message
      - status
      type: object
      properties:
        status:
          type: string
        id:
          type: string
        category:
          $ref: '#/components/schemas/ErrorCategory'
        subCategory:
          type: object
          properties: {}
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
        context:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        links:
          type: object
          additionalProperties:
            type: string
    Tag:
      required:
      - createdAt
      - deletedAt
      - id
      - name
      - updatedAt
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the Blog Tag.
        name:
          type: string
          description: The name of the tag.
        deletedAt:
          type: string
          description: The timestamp (ISO8601 format) when this Blog Tag was deleted.
          format: date-time
        createdAt:
          type: string
          description: The timestamp (ISO8601 format) when this Blog Tag was created.
          format: date-time
        updatedAt:
          type: string
          description: The timestamp (ISO8601 format) when this Blog Tag was last
            updated.
          format: date-time
      description: Model definition for a Tag.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        deletedAt: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
  responses:
    Error:
      description: An error occurred.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    oauth2_legacy:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://app.hubspot.com/oauth/authorize
          tokenUrl: https://api.hubapi.com/oauth/v1/token
          scopes:
            content: Read from and write to my Content
    hapikey:
      type: apiKey
      name: hapikey
      in: query
x-hubspot-available-client-libraries:
- PHP
- Node
- Python
- Ruby
