/*
HubDB endpoints

Testing RowsBatchApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hubdb

import (
	openapiclient "./openapi"
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_hubdb_RowsBatchApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RowsBatchApiService BatchCloneDraftTableRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsBatchApi.BatchCloneDraftTableRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsBatchApiService BatchCreateDraftTableRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsBatchApi.BatchCreateDraftTableRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsBatchApiService BatchPurgeDraftTableRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsBatchApi.BatchPurgeDraftTableRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsBatchApiService BatchReadDraftTableRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsBatchApi.BatchReadDraftTableRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsBatchApiService BatchReadTableRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsBatchApi.BatchReadTableRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsBatchApiService BatchReplaceDraftTableRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsBatchApi.BatchReplaceDraftTableRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsBatchApiService BatchUpdateDraftTableRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsBatchApi.BatchUpdateDraftTableRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
