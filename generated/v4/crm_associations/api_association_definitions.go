/*
CrmPublicAssociationsServiceV4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_associations

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"

	"github.com/Daniel-ef/go-hubspot"
	"net/url"
	"strings"
)

// AssociationDefinitionsApiService AssociationDefinitionsApi service
type AssociationDefinitionsApiService service

type ApiDeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdRequest struct {
	ctx               context.Context
	ApiService        *AssociationDefinitionsApiService
	fromObjectType    string
	toObjectType      string
	associationTypeId int32
}

func (r ApiDeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdExecute(r)
}

/*
DeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeId Delete

Deletes an association definition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fromObjectType
	@param toObjectType
	@param associationTypeId
	@return ApiDeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdRequest
*/
func (a *AssociationDefinitionsApiService) DeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeId(ctx context.Context, fromObjectType string, toObjectType string, associationTypeId int32) ApiDeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdRequest {
	return ApiDeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdRequest{
		ApiService:        a,
		ctx:               ctx,
		fromObjectType:    fromObjectType,
		toObjectType:      toObjectType,
		associationTypeId: associationTypeId,
	}
}

// Execute executes the request
func (a *AssociationDefinitionsApiService) DeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdExecute(r ApiDeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssociationDefinitionsApiService.DeleteCrmV4AssociationsFromObjectTypeToObjectTypeLabelsAssociationTypeId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/{fromObjectType}/{toObjectType}/labels/{associationTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterToString(r.fromObjectType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterToString(r.toObjectType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"associationTypeId"+"}", url.PathEscape(parameterToString(r.associationTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest struct {
	ctx            context.Context
	ApiService     *AssociationDefinitionsApiService
	fromObjectType string
	toObjectType   string
}

func (r ApiGetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) Execute() (*CollectionResponseAssociationSpecWithLabelNoPaging, *http.Response, error) {
	return r.ApiService.GetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsExecute(r)
}

/*
GetCrmV4AssociationsFromObjectTypeToObjectTypeLabels Read

Returns all association types between two object types

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fromObjectType
	@param toObjectType
	@return ApiGetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest
*/
func (a *AssociationDefinitionsApiService) GetCrmV4AssociationsFromObjectTypeToObjectTypeLabels(ctx context.Context, fromObjectType string, toObjectType string) ApiGetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest {
	return ApiGetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest{
		ApiService:     a,
		ctx:            ctx,
		fromObjectType: fromObjectType,
		toObjectType:   toObjectType,
	}
}

// Execute executes the request
//
//	@return CollectionResponseAssociationSpecWithLabelNoPaging
func (a *AssociationDefinitionsApiService) GetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsExecute(r ApiGetCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) (*CollectionResponseAssociationSpecWithLabelNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponseAssociationSpecWithLabelNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssociationDefinitionsApiService.GetCrmV4AssociationsFromObjectTypeToObjectTypeLabels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/{fromObjectType}/{toObjectType}/labels"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterToString(r.fromObjectType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterToString(r.toObjectType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest struct {
	ctx                                      context.Context
	ApiService                               *AssociationDefinitionsApiService
	fromObjectType                           string
	toObjectType                             string
	publicAssociationDefinitionCreateRequest *PublicAssociationDefinitionCreateRequest
}

func (r ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) PublicAssociationDefinitionCreateRequest(publicAssociationDefinitionCreateRequest PublicAssociationDefinitionCreateRequest) ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest {
	r.publicAssociationDefinitionCreateRequest = &publicAssociationDefinitionCreateRequest
	return r
}

func (r ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) Execute() (*CollectionResponseAssociationSpecWithLabelNoPaging, *http.Response, error) {
	return r.ApiService.PostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsExecute(r)
}

/*
PostCrmV4AssociationsFromObjectTypeToObjectTypeLabels Create

Create a user defined association definition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fromObjectType
	@param toObjectType
	@return ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest
*/
func (a *AssociationDefinitionsApiService) PostCrmV4AssociationsFromObjectTypeToObjectTypeLabels(ctx context.Context, fromObjectType string, toObjectType string) ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest {
	return ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest{
		ApiService:     a,
		ctx:            ctx,
		fromObjectType: fromObjectType,
		toObjectType:   toObjectType,
	}
}

// Execute executes the request
//
//	@return CollectionResponseAssociationSpecWithLabelNoPaging
func (a *AssociationDefinitionsApiService) PostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsExecute(r ApiPostCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) (*CollectionResponseAssociationSpecWithLabelNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponseAssociationSpecWithLabelNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssociationDefinitionsApiService.PostCrmV4AssociationsFromObjectTypeToObjectTypeLabels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/{fromObjectType}/{toObjectType}/labels"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterToString(r.fromObjectType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterToString(r.toObjectType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicAssociationDefinitionCreateRequest == nil {
		return localVarReturnValue, nil, reportError("publicAssociationDefinitionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicAssociationDefinitionCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest struct {
	ctx                                      context.Context
	ApiService                               *AssociationDefinitionsApiService
	fromObjectType                           string
	toObjectType                             string
	publicAssociationDefinitionUpdateRequest *PublicAssociationDefinitionUpdateRequest
}

func (r ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) PublicAssociationDefinitionUpdateRequest(publicAssociationDefinitionUpdateRequest PublicAssociationDefinitionUpdateRequest) ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest {
	r.publicAssociationDefinitionUpdateRequest = &publicAssociationDefinitionUpdateRequest
	return r
}

func (r ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsExecute(r)
}

/*
PutCrmV4AssociationsFromObjectTypeToObjectTypeLabels Update

Update a user defined association definition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fromObjectType
	@param toObjectType
	@return ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest
*/
func (a *AssociationDefinitionsApiService) PutCrmV4AssociationsFromObjectTypeToObjectTypeLabels(ctx context.Context, fromObjectType string, toObjectType string) ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest {
	return ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest{
		ApiService:     a,
		ctx:            ctx,
		fromObjectType: fromObjectType,
		toObjectType:   toObjectType,
	}
}

// Execute executes the request
func (a *AssociationDefinitionsApiService) PutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsExecute(r ApiPutCrmV4AssociationsFromObjectTypeToObjectTypeLabelsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssociationDefinitionsApiService.PutCrmV4AssociationsFromObjectTypeToObjectTypeLabels")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/associations/{fromObjectType}/{toObjectType}/labels"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterToString(r.fromObjectType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterToString(r.toObjectType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicAssociationDefinitionUpdateRequest == nil {
		return nil, reportError("publicAssociationDefinitionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicAssociationDefinitionUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
